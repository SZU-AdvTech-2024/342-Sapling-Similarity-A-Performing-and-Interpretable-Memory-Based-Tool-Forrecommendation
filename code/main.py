import numpy as npimport utilsimport similarities as smlfrom parse import parse_argsimport timet1 = time.time()args = parse_args()g = args.gammadata = args.datasetmodel = args.similaritytest_data = args.testprint("reading data...")if test_data == "validation":    N_users, N_items, M, train, test, = utils.read_data_validation(data)else:    N_users, N_items, M, train, test = utils.read_data(data)M = M.astype(np.float32)print("measuring similarity of users...")B = sml.similarity(M,model,0)print("measuring user-based recommendations...")rec_u = np.nan_to_num(np.dot(B,M).T/np.sum(abs(B), axis = 1)).T print("measuring similarity of items...")B = sml.similarity(M,model,1)print("measuring item-based recommendations...")rec_i = np.nan_to_num(np.dot(M,B)/np.sum(abs(B), axis = 0)) print("measuring final model recommendations...")rec = (1-g)*rec_u+g*rec_iprint("measuring performance of user-based...")scores_user = utils.scores(train, test, rec_u, N_users, N_items, K = 20)print("measuring performance of item-based...")scores_item = utils.scores(train, test, rec_i, N_users, N_items, K = 20)print("measuring performance of final model...")scores = utils.scores(train, test, rec, N_users, N_items, K = 20)print("\nRESULTS\n")print("user-based")print("precision@20:\t{}\nrecall@20:\t{}\nndcg@20:\t{}".format(scores_user[0],scores_user[1],scores_user[2]))print("item-based")print("precision@20:\t{}\nrecall@20:\t{}\nndcg@20:\t{}".format(scores_item[0],scores_item[1],scores_item[2]))print("final model")print("precision@20:\t{}\nrecall@20:\t{}\nndcg@20:\t{}".format(scores[0],scores[1],scores[2]))t2 = time.time()print(t2-t1,"seconds")